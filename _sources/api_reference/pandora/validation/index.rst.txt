:mod:`pandora.validation`
=========================

.. py:module:: pandora.validation


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   interpolated_disparity/index.rst
   validation/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pandora.validation.AbstractValidation
   pandora.validation.AbstractInterpolation



.. py:class:: AbstractValidation

   Bases: :class:`object`

   .. attribute:: __metaclass__
      

      

   .. attribute:: validation_methods_avail
      

      

   .. method:: register_subclass(cls, short_name: str)
      :classmethod:

      Allows to register the subclass with its short name

      :param short_name: the subclass to be registered
      :type short_name: string


   .. method:: desc(self)
      :abstractmethod:

      Describes the validation method


   .. method:: disparity_checking(self, dataset_ref: xr.Dataset, dataset_sec: xr.Dataset, img_ref: xr.Dataset = None, img_sec: xr.Dataset = None, cv: xr.Dataset = None) -> xr.Dataset
      :abstractmethod:

      Determination of occlusions and false matches by performing a consistency check on valid pixels.         Update the validity_mask :
          - If out & MSK_PIXEL_OCCLUSION != 0 : Invalid pixel : occluded pixel
          - If out & MSK_PIXEL_MISMATCH  != 0  : Invalid pixel : mismatched pixel
      Update the measure map: add the disp RL / disp LR distances

      :param dataset_ref: Reference Dataset
      :type dataset_ref: xarray.Dataset with the variables :
          - disparity_map 2D xarray.DataArray (row, col)
          - confidence_measure 3D xarray.DataArray (row, col, indicator)
          - validity_mask 2D xarray.DataArray (row, col)
      :param dataset_sec: Secondary Dataset
      :type dataset_sec: xarray.Dataset with the variables :
          - disparity_map 2D xarray.DataArray (row, col)
          - confidence_measure 3D xarray.DataArray (row, col, indicator)
          - validity_mask 2D xarray.DataArray (row, col)
      :param img_ref: reference Datset image
      :type img_ref:
          xarray.Dataset containing :
              - im : 2D (row, col) xarray.DataArray
              - msk : 2D (row, col) xarray.DataArray
      :param img_sec: secondary Dataset image
      :type img_sec:
          xarray.Dataset containing :
              - im : 2D (row, col) xarray.DataArray
              - msk : 2D (row, col) xarray.DataArray
      :param cv: cost_volume Dataset
      :type cv:
          xarray.Dataset with the variables:
              - cost_volume 3D xarray.DataArray (row, col, disp)
              - confidence_measure 3D xarray.DataArray (row, col, indicator)
      :return: the reference dataset, with the bit 8 and 9 of the validity_mask :
          - If out & MSK_PIXEL_OCCLUSION != 0 : Invalid pixel : occluded pixel
          - If out & MSK_PIXEL_MISMATCH  != 0  : Invalid pixel : mismatched pixel
      :rtype : xarray.Dataset with the variables :
          - disparity_map 2D xarray.DataArray (row, col)
          - confidence_measure 3D xarray.DataArray (row, col, indicator)
          - validity_mask 2D xarray.DataArray (row, col)



.. py:class:: AbstractInterpolation

   Bases: :class:`object`

   .. attribute:: __metaclass__
      

      

   .. attribute:: interpolation_methods_avail
      

      

   .. method:: register_subclass(cls, short_name: str)
      :classmethod:

      Allows to register the subclass with its short name

      :param short_name: the subclass to be registered
      :type short_name: string


   .. method:: desc(self)
      :abstractmethod:

      Describes the disparity interpolation method for the validation step


   .. method:: interpolated_disparity(self, ref: xr.Dataset, img_ref: xr.Dataset = None, img_sec: xr.Dataset = None, cv: xr.Dataset = None) -> xr.Dataset
      :abstractmethod:

      Interpolation of the left disparity map to resolve occlusion and mismatch conflicts.

      :param ref: Reference Dataset
      :type ref: xarray.Dataset with the variables :
          - disparity_map 2D xarray.DataArray (row, col)
          - confidence_measure 3D xarray.DataArray (row, col, indicator)
          - validity_mask 2D xarray.DataArray (row, col)
      :param img_ref: reference Datset image
      :type img_ref:
          xarray.Dataset containing :
              - im : 2D (row, col) xarray.DataArray
              - msk : 2D (row, col) xarray.DataArray
      :param img_sec: secondary Dataset image
      :type img_sec:
          xarray.Dataset containing :
              - im : 2D (row, col) xarray.DataArray
              - msk : 2D (row, col) xarray.DataArray
      :param cv: cost_volume Dataset
      :type cv:
          xarray.Dataset with the variables:
              - cost_volume 3D xarray.DataArray (row, col, disp)
              - confidence_measure 3D xarray.DataArray (row, col, indicator)
      :return: the interpolated disparity map, with the validity mask update :
          - If bit 4 == 1: Invalid pixel : filled occlusion
          - If bit 5 == 1: Invalid pixel : filled mismatch
      :rtype: xarray.Dataset with the variables :
          - disparity_map 2D xarray.DataArray (row, col)
          - confidence_measure 3D xarray.DataArray (row, col, indicator)
          - validity_mask 2D xarray.DataArray (row, col)



