:mod:`pandora.img_tools`
========================

.. py:module:: pandora.img_tools

.. autoapi-nested-parse::

   This module contains functions associated to raster images.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pandora.img_tools.read_img
   pandora.img_tools.shift_sec_img
   pandora.img_tools.check_inside_image
   pandora.img_tools.census_transform
   pandora.img_tools.compute_mean_raster
   pandora.img_tools.compute_mean_patch
   pandora.img_tools.compute_std_raster


.. function:: read_img(img: str, no_data: float, cfg: Dict, mask: xr.Dataset = None) -> xr.Dataset

   Read image and mask, and return the corresponding xarray.DataSet

   :param img: Path to the image
   :type img: string
   :type no_data: no_data value in the image
   :type no_data: float
   :param cfg: image configuration, containing the mask conventions generated by this function
   :param cfg: dict
   :param mask: Path to the mask (optional)
   :type mask: string
   :return: xarray.DataSet
   :rtype:
       xarray.DataSet containing the variables :
           - im : 2D (row, col) xarray.DataArray float32
           - msk : 2D (row, col) xarray.DataArray int16, with the convention defined in the configuration file


.. function:: shift_sec_img(img_sec: xr.Dataset, subpix: int) -> List[xr.Dataset]

   Return an array that contains the shifted secondary images

   :param img_sec: secondary Dataset image
   :type img_sec:
   xarray.Dataset containing :
       - im : 2D (row, col) xarray.DataArray

   :param subpix: subpixel precision = (1 or 2 or 4)
   :type subpix: int
   :return: an array that contains the shifted secondary images
   :rtype : array of xarray.Dataset


.. function:: check_inside_image(img: xr.Dataset, x: int, y: int) -> bool

   Check if the coordinates x,y are inside the image

   :param img: Dataset image
   :type img:
       xarray.Dataset containing :
           - im : 2D (row, col) xarray.DataArray
   :param x: row coordinates
   :type x: int
   :param y: column coordinates
   :type y: int
   :return: a boolean
   :rtype: boolean


.. function:: census_transform(image: xr.Dataset, window_size: int) -> xr.Dataset

   Generates the census transformed image from an image

   :param image: Dataset image
   :type image: xarray.Dataset containing the image im : 2D (row, col) xarray.Dataset
   :param window_size: Census window size
   :type window_size: int
   :return: Dataset census transformed uint32
   :rtype: xarray.Dataset containing the transformed image im: 2D (row, col) xarray.DataArray uint32


.. function:: compute_mean_raster(img: xr.Dataset, win_size: int) -> np.ndarray

   Compute the mean within a sliding window for the whole image

   :param img: Dataset image
   :type img:
       xarray.Dataset containing :
           - im : 2D (row, col) xarray.DataArray
   :param win_size: window size
   :type win_size: int
   :return: mean raster
   :rtype: numpy array


.. function:: compute_mean_patch(img: xr.Dataset, x: int, y: int, win_size: int) -> float

   Compute the mean within a window centered at position x,y

   :param img: Dataset image
   :type img:
       xarray.Dataset containing :
           - im : 2D (row, col) xarray.DataArray
   :param x: row coordinates
   :type x: int
   :param y: column coordinates
   :type y: int
   :param win_size: window size
   :type win_size: int
   :return: mean
   :rtype : float


.. function:: compute_std_raster(img: xr.Dataset, win_size: int) -> np.ndarray

   Compute the standard deviation within a sliding window for the whole image
   with the formula : std = sqrt( E[x^2] - E[x]^2 )

   :param img: Dataset image
   :type img:
       xarray.Dataset containing :
           - im : 2D (row, col) xarray.DataArray
   :param win_size: window size
   :type win_size: int
   :return: std raster
   :rtype : numpy array


