:mod:`pandora.filter.filter`
============================

.. py:module:: pandora.filter.filter

.. autoapi-nested-parse::

   This module contains classes and functions associated to the disparity map filtering.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pandora.filter.filter.AbstractFilter
   pandora.filter.filter.NoneFilter



.. py:class:: AbstractFilter

   Bases: :class:`object`

   .. attribute:: __metaclass__
      

      

   .. attribute:: filter_methods_avail
      

      

   .. method:: register_subclass(cls, short_name: str)
      :classmethod:

      Allows to register the subclass with its short name

      :param short_name: the subclass to be registered
      :type short_name: string


   .. method:: desc(self)
      :abstractmethod:

      Describes the filtering method


   .. method:: filter_disparity(self, disp: xr.Dataset, img_ref: xr.Dataset = None, img_sec: xr.Dataset = None, cv: xr.Dataset = None) -> xr.Dataset
      :abstractmethod:

      Post processing the disparity map by applying a filter on valid pixels

      :param disp: the disparity map dataset
      :type disp:
          xarray.Dataset with the variables :
              - disparity_map 2D xarray.DataArray (row, col)
              - confidence_measure 3D xarray.DataArray (row, col, indicator)
              - validity_mask 2D xarray.DataArray (row, col)
      :param img_ref: reference Dataset image
      :tye img_ref: xarray.Dataset
      :param img_sec: secondary Dataset image
      :type img_sec: xarray.Dataset
      :param cv: cost volume dataset
      :type cv: xarray.Dataset
      :return: the Dataset with the filtered DataArray disparity_map
      :rtype:
          xarray.Dataset with the variables :
              - disparity_map 2D xarray.DataArray (row, col)
              - confidence_measure 3D xarray.DataArray (row, col, indicator)
              - validity_mask 2D xarray.DataArray (row, col)



.. py:class:: NoneFilter(**cfg: str)

   Bases: :class:`pandora.filter.filter.AbstractFilter`

   Default plugin that does not perform filtering

   .. method:: check_conf(**cfg: str) -> Dict[str, str]
      :staticmethod:

      Add default values to the dictionary if there are missing elements and check if the dictionary is correct

      :param cfg: filter configuration
      :type cfg: dict
      :return cfg: filter configuration updated
      :rtype: dict


   .. method:: desc(self)

      Describes the filtering method


   .. method:: filter_disparity(self, disp: xr.Dataset, img_ref: xr.Dataset = None, img_sec: xr.Dataset = None, cv: xr.Dataset = None) -> xr.Dataset

      Returns the disparity map without filtering

      :param disp: the disparity map dataset
      :type disp:
          xarray.Dataset with the variables :
              - disparity_map 2D xarray.DataArray (row, col)
              - confidence_measure 3D xarray.DataArray (row, col, indicator)
              - validity_mask 2D xarray.DataArray (row, col)
      :param img_ref: reference Dataset image
      :tye img_ref: xarray.Dataset
      :param img_sec: secondary Dataset image
      :type img_sec: xarray.Dataset
      :param cv: cost volume dataset
      :type cv: xarray.Dataset
      :return: the Dataset with the filtered DataArray disparity_map
      :rtype:
          xarray.Dataset with the variables :
              - disparity_map 2D xarray.DataArray (row, col)
              - confidence_measure 3D xarray.DataArray (row, col, indicator)
              - validity_mask 2D xarray.DataArray (row, col)



