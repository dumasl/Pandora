:mod:`pandora.stereo.sad_ssd`
=============================

.. py:module:: pandora.stereo.sad_ssd

.. autoapi-nested-parse::

   This module contains functions associated to SAD and SSD methods used in the cost volume measure step.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pandora.stereo.sad_ssd.SadSsd



.. py:class:: SadSsd(**cfg: Union[str, int])

   Bases: :class:`pandora.stereo.stereo.AbstractStereo`

   SadSsd class allows to compute the cost volume

   .. attribute:: _WINDOW_SIZE
      :annotation: = 5

      

   .. attribute:: _SUBPIX
      :annotation: = 1

      

   .. method:: check_conf(self, **cfg: Union[str, int]) -> Dict[str, Union[str, int]]

      Add default values to the dictionary if there are missing elements and check if the dictionary is correct

      :param cfg: stereo configuration
      :type cfg: dict
      :return cfg: stereo configuration updated
      :rtype: dict


   .. method:: desc(self)

      Describes the stereo method


   .. method:: compute_cost_volume(self, img_ref: xr.Dataset, img_sec: xr.Dataset, disp_min: int, disp_max: int, **cfg: Union[str, int]) -> xr.Dataset

      Computes the cost volume for a pair of images

      :param img_ref: reference Dataset image
      :type img_ref:
          xarray.Dataset containing :
              - im : 2D (row, col) xarray.DataArray
              - msk : 2D (row, col) xarray.DataArray
      :param img_sec: secondary Dataset image
      :type img_sec:
          xarray.Dataset containing :
              - im : 2D (row, col) xarray.DataArray
              - msk : 2D (row, col) xarray.DataArray
      :param disp_min: minimum disparity
      :type disp_min: int
      :param disp_max: maximum disparity
      :type disp_max: int
      :param cfg: images configuration containing the mask convention : valid_pixels, no_data
      :type cfg: dict
      :return: the cost volume dataset
      :rtype:
          xarray.Dataset, with the data variables:
              - cost_volume 3D xarray.DataArray (row, col, disp)
              - confidence_measure 3D xarray.DataArray (row, col, indicator)


   .. method:: ad_cost(self, p: Tuple[int, int], q: Tuple[int, int], img_ref: xr.Dataset, img_sec: xr.Dataset) -> np.ndarray

      Computes the absolute difference

      :param p: Point interval, in the reference image, over which the squared difference will be applied
      :type p: tuple
      :param q: Point interval, in the secondary image, over which the squared difference will be applied
      :type q: tuple
      :param img_ref: reference Dataset image
      :type img_ref:
          xarray.Dataset containing :
              - im : 2D (row, col) xarray.DataArray
              - msk (optional): 2D (row, col) xarray.DataArray
      :param img_sec: secondary Dataset image
      :type img_sec:
          xarray.Dataset containing :
              - im : 2D (row, col) xarray.DataArray
              - msk (optional): 2D (row, col) xarray.DataArray
      :return: the absolute difference pixel-wise between elements in the interval
      :rtype: numpy array


   .. method:: sd_cost(self, p: Tuple, q: Tuple, img_ref: xr.Dataset, img_sec: xr.Dataset) -> np.ndarray

      Computes the square difference

      :param p: Point interval, in the reference image, over which the squared difference will be applied
      :type p: tuple
      :param q: Point interval, in the secondary image, over which the squared difference will be applied
      :type q: tuple
      :param img_ref: reference Dataset image
      :type img_ref:
          xarray.Dataset containing :
              - im : 2D (row, col) xarray.DataArray
              - msk (optional): 2D (row, col) xarray.DataArray
      :param img_sec: secondary Dataset image
      :type img_sec:
          xarray.Dataset containing :
              - im : 2D (row, col) xarray.DataArray
              - msk (optional): 2D (row, col) xarray.DataArray
      :return: the squared difference pixel-wise between elements in the interval
      :rtype: numpy array


   .. method:: pixel_wise_aggregation(self, cost_volume: np.ndarray) -> np.ndarray

      Summing pixel wise matching cost over square windows

      :param cost_volume: the cost volume
      :type cost_volume: numpy array 3D (disp, col, row)
      :return: the cost volume aggregated
      :rtype: numpy array 3D ( disp, col, row)



