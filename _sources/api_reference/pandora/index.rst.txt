:mod:`pandora`
==============

.. py:module:: pandora

.. autoapi-nested-parse::

   This module contains functions to run Pandora pipeline.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   aggregation/index.rst
   filter/index.rst
   optimization/index.rst
   refinement/index.rst
   stereo/index.rst
   validation/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   JSON_checker/index.rst
   common/index.rst
   constants/index.rst
   disparity/index.rst
   img_tools/index.rst
   marge/index.rst
   output_tree_design/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   pandora.read_img
   pandora.check_conf
   pandora.read_config_file
   pandora.run
   pandora.setup_logging
   pandora.import_plugin
   pandora.main


.. function:: read_img(img: str, no_data: float, cfg: Dict, mask: xr.Dataset = None) -> xr.Dataset

   Read image and mask, and return the corresponding xarray.DataSet

   :param img: Path to the image
   :type img: string
   :type no_data: no_data value in the image
   :type no_data: float
   :param cfg: image configuration, containing the mask conventions generated by this function
   :param cfg: dict
   :param mask: Path to the mask (optional)
   :type mask: string
   :return: xarray.DataSet
   :rtype:
       xarray.DataSet containing the variables :
           - im : 2D (row, col) xarray.DataArray float32
           - msk : 2D (row, col) xarray.DataArray int16, with the convention defined in the configuration file


.. function:: check_conf(user_cfg: Dict[str, dict]) -> Dict[str, dict]

   Complete and check if the dictionary is correct

   :param user_cfg: user configuration
   :type user_cfg: dict
   :return cfg: global configuration
   :rtype cfg: dict


.. function:: read_config_file(config_file: str) -> Dict[str, dict]

   Read a json configuration file

   :param config_file: path to a json file containing the algorithm parameters
   :type config_file: string
   :return user_cfg: configuration dictionary
   :rtype: dict


.. function:: run(img_ref: xr.Dataset, img_sec: xr.Dataset, disp_min: int, disp_max: int, cfg: Dict[str, dict]) -> Tuple[xr.Dataset, xr.Dataset]

   Run the pandora pipeline

   :param img_ref: reference Dataset image
   :type img_ref:
       xarray.Dataset containing :
           - im : 2D (row, col) xarray.DataArray
           - msk (optional): 2D (row, col) xarray.DataArray
   :param img_sec: secondary Dataset image
   :type img_sec:
       xarray.Dataset containing :
           - im : 2D (row, col) xarray.DataArray
           - msk (optional): 2D (row, col) xarray.DataArray
   :param disp_min: minimal disparity
   :type disp_min: int
   :param disp_max: maximal disparity
   :type disp_max: int
   :param cfg: configuration
   :type cfg: dict
   :return:
       Two xarray.Dataset :
           - ref : the reference dataset, which contains the variables :
               - disparity_map : the disparity map in the geometry of the reference image 2D DataArray (row, col)
               - confidence_measure : the confidence measure in the geometry of the reference image 3D DataArray (row, col, indicator)
               - validity_mask : the validity mask in the geometry of the reference image 2D DataArray (row, col)

           - sec : the secondary dataset. If there is no validation step, the secondary Dataset will be empty.
               If a validation step is configured, the dataset will contain the variables :
               - disparity_map : the disparity map in the geometry of the secondary image 2D DataArray (row, col)
               - confidence_measure : the confidence measure in the geometry of the reference image 3D DataArray (row, col, indicator)
               - validity_mask : the validity mask in the geometry of the reference image 2D DataArray (row, col)

   :rtype: tuple (xarray.Dataset, xarray.Dataset)


.. function:: setup_logging(verbose: bool) -> None

   Setup the logging configuration

   :param verbose: verbose mode
   :type verbose: bool


.. function:: import_plugin() -> None

   Load all the registered entry points


.. function:: main(cfg_path: str, output: str, verbose: bool) -> None

   Check config file and run pandora framework accordingly

   :param cfg_path: path to the json configuration file
   :type cfg_path: string
   :param output: Path to output directory
   :type output: string
   :param verbose: verbose mode
   :type verbose: bool


